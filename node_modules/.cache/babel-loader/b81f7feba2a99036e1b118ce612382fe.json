{"ast":null,"code":"const urlMain = 'https://api.moviesdiplompanu.nomorepartiesxyz.ru';\nconst token = localStorage.getItem('token');\n\nconst checkResponse = response => {\n  if (response.ok) {\n    return response.json();\n  }\n\n  return Promise.reject(`Ошибка ${response.status}`);\n};\n\nexport const register = (name, email, password) => {\n  return fetch(`${urlMain}/signup`, {\n    method: 'POST',\n    credentials: 'include',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name: name,\n      email: email,\n      password: password\n    })\n  }).then(res => {\n    return res;\n  }).then(res => checkResponse(res));\n};\nexport const login = (email, password) => {\n  return fetch(`${urlMain}/signin`, {\n    method: 'POST',\n    credentials: 'include',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email: email,\n      password: password\n    })\n  }).then(res => checkResponse(res)).then(data => {\n    if (data) {\n      localStorage.setItem('token', data.token);\n      return data;\n    } else {\n      return;\n    }\n  });\n};\nexport const checkToken = jwt => {\n  return fetch(`${urlMain}/users/me`, {\n    method: 'GET',\n    credentials: 'include',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${jwt}`\n    }\n  }).then(data => data).then(res => checkResponse(res));\n};\nexport const logout = email => {\n  return fetch(`${urlMain}/signout`, {\n    method: 'POST',\n    credentials: 'include',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email: email\n    })\n  }).then(res => checkResponse(res));\n};\nexport const getUserInfo = () => {\n  return fetch(`${urlMain}/users/me`, {\n    method: 'GET',\n    credentials: 'include',\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-type': 'application/json'\n    }\n  }).then(res => checkResponse(res));\n};\nexport const setUserInfo = (name, email) => {\n  return fetch(`${urlMain}/users/me`, {\n    method: 'PATCH',\n    credentials: 'include',\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-type': 'application/json'\n    },\n    body: JSON.stringify({\n      name: name,\n      email: email\n    })\n  }).then(res => checkResponse(res));\n};\nexport const getUserMovies = () => {\n  return fetch(`${urlMain}/movies`, {\n    method: 'GET',\n    credentials: 'include',\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-type': 'application/json'\n    }\n  }).then(res => checkResponse(res));\n};\nexport const createMovie = _ref => {\n  let {\n    country,\n    director,\n    duration,\n    year,\n    description,\n    image,\n    trailerLink,\n    thumbnail,\n    movieId,\n    nameRU,\n    nameEN\n  } = _ref;\n  return fetch(`${urlMain}/movies`, {\n    method: 'POST',\n    credentials: 'include',\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-type': 'application/json'\n    },\n    body: JSON.stringify({\n      country: country,\n      director: director,\n      duration: duration,\n      year: year,\n      description: description,\n      image: image,\n      trailerLink: trailerLink,\n      thumbnail: thumbnail,\n      movieId: movieId,\n      nameRU: nameRU,\n      nameEN: nameEN\n    })\n  }).then(res => checkResponse(res));\n};\nexport const deleteMovie = movieId => {\n  return fetch(`${urlMain}/movies/${movieId}`, {\n    method: 'DELETE',\n    credentials: 'include',\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  }).then(res => checkResponse(res));\n};","map":{"version":3,"names":["urlMain","token","localStorage","getItem","checkResponse","response","ok","json","Promise","reject","status","register","name","email","password","fetch","method","credentials","headers","body","JSON","stringify","then","res","login","data","setItem","checkToken","jwt","logout","getUserInfo","setUserInfo","getUserMovies","createMovie","country","director","duration","year","description","image","trailerLink","thumbnail","movieId","nameRU","nameEN","deleteMovie"],"sources":["C:/Users/panyushin/dev/movies-explorer-frontend/src/utils/MainApi.js"],"sourcesContent":["const urlMain = 'https://api.moviesdiplompanu.nomorepartiesxyz.ru';\nconst token = localStorage.getItem('token');\n\nconst checkResponse = (response) => {\n  if (response.ok) {\n    return response.json()\n  }\n  return Promise.reject(`Ошибка ${response.status}`)\n};\n\nexport const register = (name, email, password) => {\n  return fetch(`${urlMain}/signup`, {\n    method: 'POST',\n    credentials: 'include',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name: name,\n      email: email,\n      password: password\n    })\n  })\n  .then((res) => {\n    return res;\n  })\n  .then((res) => checkResponse(res))\n};\n\nexport const login = (email, password) => {\n  return fetch(`${urlMain}/signin`, {\n    method: 'POST',\n    credentials: 'include',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email: email,\n      password: password\n    })\n  })\n  .then((res) => checkResponse(res))\n  .then((data) => {\n    if(data) {\n      localStorage.setItem('token', data.token);\n      return data;\n    } else {\n      return;\n    }\n  })\n};\n\nexport const checkToken = (jwt) => {\n  return fetch(`${urlMain}/users/me`, {\n    method: 'GET',\n    credentials: 'include',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${jwt}`\n    }\n  })\n  .then(data => data)\n  .then((res) => checkResponse(res))\n};\n\nexport const logout = (email) => {\n  return fetch(`${urlMain}/signout`, {\n    method: 'POST',\n    credentials: 'include',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email: email\n    })\n  })\n  .then((res) => checkResponse(res))\n};\n\nexport const getUserInfo = () => {\n  return fetch(`${urlMain}/users/me`, {\n    method: 'GET',\n    credentials: 'include',\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-type': 'application/json'\n    }\n  })\n  .then((res) => checkResponse(res))\n};\n\nexport const setUserInfo = (name, email) => {\n  return fetch(`${urlMain}/users/me`, {\n    method: 'PATCH',\n    credentials: 'include',\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-type': 'application/json'\n    },\n    body: JSON.stringify({\n      name: name,\n      email: email\n    })\n  })\n  .then((res) => checkResponse(res))\n};\n\nexport const getUserMovies = () => {\n  return fetch(`${urlMain}/movies`, {\n    method: 'GET',\n    credentials: 'include',\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-type': 'application/json'\n    }\n  })\n  .then((res) => checkResponse(res))\n};\n\nexport const createMovie = ({\n    country,\n    director,\n    duration,\n    year,\n    description,\n    image,\n    trailerLink,\n    thumbnail,\n    movieId,\n    nameRU,\n    nameEN\n  }) => {\n  return fetch(`${urlMain}/movies`, {\n    method: 'POST',\n    credentials: 'include',\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-type': 'application/json'\n    },\n    body: JSON.stringify({\n      country: country,\n      director: director,\n      duration: duration,\n      year: year,\n      description: description,\n      image: image,\n      trailerLink: trailerLink,\n      thumbnail: thumbnail,\n      movieId: movieId,\n      nameRU: nameRU,\n      nameEN: nameEN,\n    })\n  })\n  .then((res) => checkResponse(res))\n};\n\nexport const deleteMovie = (movieId) => {\n  return fetch(`${urlMain}/movies/${movieId}`, {\n    method: 'DELETE',\n    credentials: 'include',\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  })\n  .then((res) => checkResponse(res))\n};\n\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,kDAAhB;AACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;;AAEA,MAAMC,aAAa,GAAIC,QAAD,IAAc;EAClC,IAAIA,QAAQ,CAACC,EAAb,EAAiB;IACf,OAAOD,QAAQ,CAACE,IAAT,EAAP;EACD;;EACD,OAAOC,OAAO,CAACC,MAAR,CAAgB,UAASJ,QAAQ,CAACK,MAAO,EAAzC,CAAP;AACD,CALD;;AAOA,OAAO,MAAMC,QAAQ,GAAG,CAACC,IAAD,EAAOC,KAAP,EAAcC,QAAd,KAA2B;EACjD,OAAOC,KAAK,CAAE,GAAEf,OAAQ,SAAZ,EAAsB;IAChCgB,MAAM,EAAE,MADwB;IAEhCC,WAAW,EAAE,SAFmB;IAGhCC,OAAO,EAAE;MACP,gBAAgB;IADT,CAHuB;IAMhCC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;MACnBT,IAAI,EAAEA,IADa;MAEnBC,KAAK,EAAEA,KAFY;MAGnBC,QAAQ,EAAEA;IAHS,CAAf;EAN0B,CAAtB,CAAL,CAYNQ,IAZM,CAYAC,GAAD,IAAS;IACb,OAAOA,GAAP;EACD,CAdM,EAeND,IAfM,CAeAC,GAAD,IAASnB,aAAa,CAACmB,GAAD,CAfrB,CAAP;AAgBD,CAjBM;AAmBP,OAAO,MAAMC,KAAK,GAAG,CAACX,KAAD,EAAQC,QAAR,KAAqB;EACxC,OAAOC,KAAK,CAAE,GAAEf,OAAQ,SAAZ,EAAsB;IAChCgB,MAAM,EAAE,MADwB;IAEhCC,WAAW,EAAE,SAFmB;IAGhCC,OAAO,EAAE;MACP,gBAAgB;IADT,CAHuB;IAMhCC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;MACnBR,KAAK,EAAEA,KADY;MAEnBC,QAAQ,EAAEA;IAFS,CAAf;EAN0B,CAAtB,CAAL,CAWNQ,IAXM,CAWAC,GAAD,IAASnB,aAAa,CAACmB,GAAD,CAXrB,EAYND,IAZM,CAYAG,IAAD,IAAU;IACd,IAAGA,IAAH,EAAS;MACPvB,YAAY,CAACwB,OAAb,CAAqB,OAArB,EAA8BD,IAAI,CAACxB,KAAnC;MACA,OAAOwB,IAAP;IACD,CAHD,MAGO;MACL;IACD;EACF,CAnBM,CAAP;AAoBD,CArBM;AAuBP,OAAO,MAAME,UAAU,GAAIC,GAAD,IAAS;EACjC,OAAOb,KAAK,CAAE,GAAEf,OAAQ,WAAZ,EAAwB;IAClCgB,MAAM,EAAE,KAD0B;IAElCC,WAAW,EAAE,SAFqB;IAGlCC,OAAO,EAAE;MACP,gBAAgB,kBADT;MAEP,iBAAkB,UAASU,GAAI;IAFxB;EAHyB,CAAxB,CAAL,CAQNN,IARM,CAQDG,IAAI,IAAIA,IARP,EASNH,IATM,CASAC,GAAD,IAASnB,aAAa,CAACmB,GAAD,CATrB,CAAP;AAUD,CAXM;AAaP,OAAO,MAAMM,MAAM,GAAIhB,KAAD,IAAW;EAC/B,OAAOE,KAAK,CAAE,GAAEf,OAAQ,UAAZ,EAAuB;IACjCgB,MAAM,EAAE,MADyB;IAEjCC,WAAW,EAAE,SAFoB;IAGjCC,OAAO,EAAE;MACP,gBAAgB;IADT,CAHwB;IAMjCC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;MACnBR,KAAK,EAAEA;IADY,CAAf;EAN2B,CAAvB,CAAL,CAUNS,IAVM,CAUAC,GAAD,IAASnB,aAAa,CAACmB,GAAD,CAVrB,CAAP;AAWD,CAZM;AAcP,OAAO,MAAMO,WAAW,GAAG,MAAM;EAC/B,OAAOf,KAAK,CAAE,GAAEf,OAAQ,WAAZ,EAAwB;IAClCgB,MAAM,EAAE,KAD0B;IAElCC,WAAW,EAAE,SAFqB;IAGlCC,OAAO,EAAE;MACP,iBAAkB,UAASjB,KAAM,EAD1B;MAEP,gBAAgB;IAFT;EAHyB,CAAxB,CAAL,CAQNqB,IARM,CAQAC,GAAD,IAASnB,aAAa,CAACmB,GAAD,CARrB,CAAP;AASD,CAVM;AAYP,OAAO,MAAMQ,WAAW,GAAG,CAACnB,IAAD,EAAOC,KAAP,KAAiB;EAC1C,OAAOE,KAAK,CAAE,GAAEf,OAAQ,WAAZ,EAAwB;IAClCgB,MAAM,EAAE,OAD0B;IAElCC,WAAW,EAAE,SAFqB;IAGlCC,OAAO,EAAE;MACP,iBAAkB,UAASjB,KAAM,EAD1B;MAEP,gBAAgB;IAFT,CAHyB;IAOlCkB,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;MACnBT,IAAI,EAAEA,IADa;MAEnBC,KAAK,EAAEA;IAFY,CAAf;EAP4B,CAAxB,CAAL,CAYNS,IAZM,CAYAC,GAAD,IAASnB,aAAa,CAACmB,GAAD,CAZrB,CAAP;AAaD,CAdM;AAgBP,OAAO,MAAMS,aAAa,GAAG,MAAM;EACjC,OAAOjB,KAAK,CAAE,GAAEf,OAAQ,SAAZ,EAAsB;IAChCgB,MAAM,EAAE,KADwB;IAEhCC,WAAW,EAAE,SAFmB;IAGhCC,OAAO,EAAE;MACP,iBAAkB,UAASjB,KAAM,EAD1B;MAEP,gBAAgB;IAFT;EAHuB,CAAtB,CAAL,CAQNqB,IARM,CAQAC,GAAD,IAASnB,aAAa,CAACmB,GAAD,CARrB,CAAP;AASD,CAVM;AAYP,OAAO,MAAMU,WAAW,GAAG,QAYnB;EAAA,IAZoB;IACxBC,OADwB;IAExBC,QAFwB;IAGxBC,QAHwB;IAIxBC,IAJwB;IAKxBC,WALwB;IAMxBC,KANwB;IAOxBC,WAPwB;IAQxBC,SARwB;IASxBC,OATwB;IAUxBC,MAVwB;IAWxBC;EAXwB,CAYpB;EACN,OAAO7B,KAAK,CAAE,GAAEf,OAAQ,SAAZ,EAAsB;IAChCgB,MAAM,EAAE,MADwB;IAEhCC,WAAW,EAAE,SAFmB;IAGhCC,OAAO,EAAE;MACP,iBAAkB,UAASjB,KAAM,EAD1B;MAEP,gBAAgB;IAFT,CAHuB;IAOhCkB,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;MACnBa,OAAO,EAAEA,OADU;MAEnBC,QAAQ,EAAEA,QAFS;MAGnBC,QAAQ,EAAEA,QAHS;MAInBC,IAAI,EAAEA,IAJa;MAKnBC,WAAW,EAAEA,WALM;MAMnBC,KAAK,EAAEA,KANY;MAOnBC,WAAW,EAAEA,WAPM;MAQnBC,SAAS,EAAEA,SARQ;MASnBC,OAAO,EAAEA,OATU;MAUnBC,MAAM,EAAEA,MAVW;MAWnBC,MAAM,EAAEA;IAXW,CAAf;EAP0B,CAAtB,CAAL,CAqBNtB,IArBM,CAqBAC,GAAD,IAASnB,aAAa,CAACmB,GAAD,CArBrB,CAAP;AAsBD,CAnCM;AAqCP,OAAO,MAAMsB,WAAW,GAAIH,OAAD,IAAa;EACtC,OAAO3B,KAAK,CAAE,GAAEf,OAAQ,WAAU0C,OAAQ,EAA9B,EAAiC;IAC3C1B,MAAM,EAAE,QADmC;IAE3CC,WAAW,EAAE,SAF8B;IAG3CC,OAAO,EAAE;MACP,iBAAkB,UAASjB,KAAM;IAD1B;EAHkC,CAAjC,CAAL,CAONqB,IAPM,CAOAC,GAAD,IAASnB,aAAa,CAACmB,GAAD,CAPrB,CAAP;AAQD,CATM"},"metadata":{},"sourceType":"module"}